{"version":3,"sources":["utils/checkStore.js","utils/history.js","reducers.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","services/create.js","components/SuccessModal.js","components/EventForm/constants.js","components/EventForm/saga.js","components/EventForm/actions.js","components/EventForm/reducer.js","components/EventForm/index.js","containers/App/index.js","index.js","configureStore.js"],"names":["checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","history","createBrowserHistory","createReducer","combineReducers","router","connectRouter","form","formReducer","injectReducerFactory","isValid","key","reducer","isString","isEmpty","Reflect","has","getInjectors","injectReducer","DAEMON","allowedModes","checkKey","checkDescriptor","descriptor","saga","mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectSaga","ejectSaga","create","newObject","console","log","call","index","post","path","SuccessModal","toggle","isOpen","className","Modal","onClick","ModalHeader","ModalBody","ModalFooter","Button","color","outline","ON_FORM_SUBMIT","eventFormSaga","onFormSubmitSaga","all","takeLatest","constants","params","response","put","type","reset","error","message","initialState","fromJS","formIsSubmitting","eventFormReducer","state","action","set","withSaga","WrappedComponent","InjectSaga","props","context","injectors","this","React","Component","contextType","ReactReduxContext","displayName","name","hoistNonReactStatics","withReducer","ReducerInjector","formspec","enableReinitialize","onSubmit","values","toJS","actions","compose","reduxForm","handleSubmit","useState","setFirstName","setLastName","setEmail","setEventDate","isSuccessModalOpen","setIsSuccessModalOpen","Row","Col","Form","FormGroup","Label","for","component","id","placeholder","onChange","e","target","value","size","block","App","Container","Card","CardBody","CardTitle","renderApp","composeEnhancers","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","createStore","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.378b470c.chunk.js","sourcesContent":["import { conformsTo, isFunction, isObject } from 'lodash';\nimport invariant from 'invariant';\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n    const shape = {\n        dispatch: isFunction,\n        subscribe: isFunction,\n        getState: isFunction,\n        replaceReducer: isFunction,\n        runSaga: isFunction,\n        injectedReducers: isObject,\n        injectedSagas: isObject,\n    };\n    invariant(\n        conformsTo(store, shape),\n        '(app/utils...) injectors: Expected a valid redux store',\n    );\n}","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux-immutable';\nimport { connectRouter } from 'connected-react-router';\nimport { reducer as formReducer } from 'redux-form/immutable';\n\nimport history from './utils/history';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n    return combineReducers({\n        router: connectRouter(history),\n        form: formReducer,\n        ...injectedReducers,\n    });\n}\n","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from '../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n    return function injectReducer(key, reducer) {\n        if (!isValid) checkStore(store);\n\n        invariant(\n            isString(key) && !isEmpty(key) && isFunction(reducer),\n            '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\n        );\n\n        // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n        if (\n            Reflect.has(store.injectedReducers, key) &&\n            store.injectedReducers[key] === reducer\n        )\n            return;\n\n        store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n        store.replaceReducer(createReducer(store.injectedReducers));\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n\n    return {\n        injectReducer: injectReducerFactory(store, true),\n    };\n}\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n    class ReducerInjector extends React.Component {\n        static WrappedComponent = WrappedComponent;\n\n        static contextType = ReactReduxContext;\n\n        static displayName = `withReducer(${WrappedComponent.displayName ||\n            WrappedComponent.name ||\n            'Component'})`;\n\n        constructor(props, context) {\n            super(props, context);\n\n            getInjectors(context.store).injectReducer(key, reducer);\n        }\n\n        render() {\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n    const context = React.useContext(ReactReduxContext);\n    React.useEffect(() => {\n        getInjectors(context.store).injectReducer(key, reducer);\n    }, [context.store, key, reducer]);\n};\n\nexport { useInjectReducer };","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n    invariant(\n        isString(key) && !isEmpty(key),\n        '(app/utils...) injectSaga: Expected `key` to be a non empty string',\n    );\n\nconst checkDescriptor = descriptor => {\n    const shape = {\n        saga: isFunction,\n        mode: mode => isString(mode) && allowedModes.includes(mode),\n    };\n    invariant(\n        conformsTo(descriptor, shape),\n        '(app/utils...) injectSaga: Expected a valid saga descriptor',\n    );\n};\n\nexport function injectSagaFactory(store, isValid) {\n    return function injectSaga(key, descriptor = {}, args) {\n        if (!isValid) checkStore(store);\n\n        const newDescriptor = {\n            ...descriptor,\n            mode: descriptor.mode || DAEMON,\n        };\n        const { saga, mode } = newDescriptor;\n\n        checkKey(key);\n        checkDescriptor(newDescriptor);\n\n        let hasSaga = Reflect.has(store.injectedSagas, key);\n\n        if (process.env.NODE_ENV !== 'production') {\n            const oldDescriptor = store.injectedSagas[key];\n            // enable hot reloading of daemon and once-till-unmount sagas\n            if (hasSaga && oldDescriptor.saga !== saga) {\n                oldDescriptor.task.cancel();\n                hasSaga = false;\n            }\n        }\n\n        if (\n            !hasSaga ||\n            (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n        ) {\n            /* eslint-disable no-param-reassign */\n            store.injectedSagas[key] = {\n                ...newDescriptor,\n                task: store.runSaga(saga, args),\n            };\n            /* eslint-enable no-param-reassign */\n        }\n    };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n    return function ejectSaga(key) {\n        if (!isValid) checkStore(store);\n\n        checkKey(key);\n\n        if (Reflect.has(store.injectedSagas, key)) {\n            const descriptor = store.injectedSagas[key];\n            if (descriptor.mode && descriptor.mode !== DAEMON) {\n                descriptor.task.cancel();\n                // Clean up in production; in development we need `descriptor.saga` for hot reloading\n                if (process.env.NODE_ENV === 'production') {\n                    // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n                    store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n                }\n            }\n        }\n    };\n}\n\nexport default function getInjectors(store) {\n    checkStore(store);\n\n    return {\n        injectSaga: injectSagaFactory(store, true),\n        ejectSaga: ejectSagaFactory(store, true),\n    };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n    class InjectSaga extends React.Component {\n        static WrappedComponent = WrappedComponent;\n\n        static contextType = ReactReduxContext;\n\n        static displayName = `withSaga(${WrappedComponent.displayName ||\n            WrappedComponent.name ||\n            'Component'})`;\n\n        constructor(props, context) {\n            super(props, context);\n\n            this.injectors = getInjectors(context.store);\n\n            this.injectors.injectSaga(key, { saga, mode }, this.props);\n        }\n\n        componentWillUnmount() {\n            this.injectors.ejectSaga(key);\n        }\n\n        render() {\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n    const context = React.useContext(ReactReduxContext);\n    React.useEffect(() => {\n        const injectors = getInjectors(context.store);\n        injectors.injectSaga(key, { saga, mode });\n\n        return () => {\n            injectors.ejectSaga(key);\n        };\n    }, [context.store, saga, mode, key]);\n};\n\nexport { useInjectSaga };","//import axios from 'axios';\nimport { call } from 'redux-saga/effects';\nimport index from '../index';\nconst baseUrl = 'http://localhost:3001/';\n\nexport default function* create(newObject) {\n    console.log('new object in services ', newObject) //doesn't get hit\n    return yield call(index.post, {\n        path: baseUrl, newObject\n    })\n}","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst SuccessModal = ({ toggle, isOpen, className }) => {\n\n    return (\n        <Modal isOpen={isOpen} onClick={toggle} className={className}>\n            <ModalHeader onClick={toggle}>Congratulations!</ModalHeader>\n            <ModalBody>\n                The event form has submitted successfully!\n            </ModalBody>\n            <ModalFooter>\n                <Button onClick={toggle} color=\"white\" outline className=\"custom-btn text-uppercase font-weight-bold\" >Close</Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n\nexport default SuccessModal;","export const ON_FORM_SUBMIT = 'src/EventForm/ON_FORM_SUBMIT'\nexport const ON_FORM_SUBMIT_SUCCESS = 'src/EventForm/ON_FORM_SUBMIT_SUCCESS'\nexport const ON_FORM_SUBMIT_FAIL = 'src/EventForm/ON_FORM_SUBMIT_FAIL'\n\nexport const EVENT_FORM = 'eventForm'\n","import { reset } from 'redux-form';\nimport {\n    all,\n    call,\n    put,\n    takeLatest\n} from 'redux-saga/effects';\n\nimport create from '../../services/create';\n//import getAll from '../../services/getAll';\n\nimport * as constants from './constants';\nimport * as actions from './actions';\n\nexport default function* eventFormSaga() {\n    yield all([\n        takeLatest(\n            constants.ON_FORM_SUBMIT,\n            onFormSubmitSaga\n        )\n    ])\n}\n\nexport function* onFormSubmitSaga({ params }) {\n    try {\n        console.log('params in saga', params)\n        const response = yield call(create, { newObject: params })\n        yield put(actions.onFormSubmitSuccess())\n        console.log('saga resonse', response); //never happens\n        yield put(reset(constants.EVENT_FORM))\n    } catch (error) {\n        yield put(actions.onFormSubmitFail(error.message))\n    }\n\n}","import * as constants from './constants';\n\nexport const onFormSubmit = (params) => ({\n    type: constants.ON_FORM_SUBMIT,\n    params\n})\n\nexport const onFormSubmitSuccess = () => ({\n    type: constants.ON_FORM_SUBMIT_SUCCESS,\n})\n\nexport const onFormSubmitFail = (error) => ({\n    type: constants.ON_FORM_SUBMIT_FAIL,\n    error\n})","import { fromJS } from 'immutable';\n\nimport * as constants from './constants';\n\nexport const initialState = fromJS({\n    formIsSubmitting: false,\n    error: null\n});\n\nconst eventFormReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case constants.ON_FORM_SUBMIT:\n            return state.set('formIsSubmitting', true)\n        case constants.ON_FORM_SUBMIT_SUCCESS:\n            return state.set('formIsSubmitting', false)\n        case constants.ON_FORM_SUBMIT_FAIL:\n            return state.set('error', action.error)\n        default:\n            return state;\n    };\n};\n\nexport default eventFormReducer;","import React, { useState, useEffect } from 'react';\nimport { compose } from 'redux';\nimport injectReducer from '../../utils/injectReducer';\nimport injectSaga from '../../utils/injectSaga';\n\nimport { Row, Col, Button, Form, FormGroup, Label } from 'reactstrap';\nimport { Field, reduxForm } from 'redux-form/immutable';\n\nimport getAll from '../../services/getAll';\nimport create from '../../services/create';\nimport SuccessModal from '../SuccessModal';\n\nimport saga from './saga';\nimport reducer from './reducer';\nimport * as constants from './constants';\nimport * as actions from './actions';\n\nconst EventForm = ({ handleSubmit, onSubmit }) => {\n    const [form, setForms] = useState([]);\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [eventDate, setEventDate] = useState(null);\n    const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);\n\n    // useEffect(\n    //     () => {\n    //         getAll\n    //             .then(initialForms => {\n    //                 setForms(initialForms)\n    //             })\n    //             .catch(error => console.log(`There was an error getting forms. ${error}`))\n    //     }\n    // )\n\n    // const handleFormSubmit = (e) => {\n    //     e.preventDefault();\n\n    //     const eventForm = {\n    //         firstName: firstName,\n    //         lastName: lastName,\n    //         email: email,\n    //         eventDate: eventDate\n    //     }\n\n    //     formService\n    //         .create(eventForm);\n\n    //     setForms(form.concat(eventForm))\n    //     console.log(form);\n    //     setIsSuccessModalOpen(!isSuccessModalOpen);\n    // }\n\n    const handleFirstNameChange = (e) => {\n        setFirstName(e.target.value)\n    };\n    const handleLastNameChange = (e) => {\n        setLastName(e.target.value)\n    };\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value)\n    };\n    const handleEventDateChange = (e) => {\n        setEventDate(e.target.value)\n    };\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <SuccessModal className=\"success-modal\" isOpen={!!isSuccessModalOpen} toggle={() => setIsSuccessModalOpen(false)} />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form onSubmit={handleSubmit(onSubmit)} className=\"px-1\">\n                        <FormGroup>\n                            <Label for=\"name\"><h5 className=\"font-weight-bold text-uppercase my-0\">Name</h5></Label>\n                            <div className=\"d-flex\">\n                                <Field component=\"input\" className=\"mr-2 w-100 rounded p-1\" type=\"text\" name=\"firstName\" id=\"firstName\" placeholder=\"First name\" onChange={handleFirstNameChange} />\n                                <Field component=\"input\" className=\"w-100 rounded p-1\" type=\"text\" name=\"lastName\" id=\"lastName\" placeholder=\"Last name\" onChange={handleLastNameChange} />\n                            </div>\n                        </FormGroup>\n                        <FormGroup className=\"my-4\">\n                            <Label for=\"email\"><h5 className=\"font-weight-bold text-uppercase my-0\">Email</h5></Label>\n                            <Field component=\"input\" className=\"w-100 d-block rounded p-1\" type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter your email\" onChange={handleEmailChange} />\n                        </FormGroup>\n                        <FormGroup >\n                            <Label for=\"eventDate\"><h5 className=\"font-weight-bold text-uppercase my-0\">Event Date</h5></Label>\n                            <Field\n                                component=\"input\"\n                                type=\"date\"\n                                name=\"date\"\n                                id=\"eventDate\"\n                                placeholder=\"Event Date\"\n                                onChange={handleEventDateChange}\n                                className=\"w-100 d-block text-muted rounded p-1\"\n                            />\n                        </FormGroup>\n                        <Button size=\"lg\" type=\"submit\" color=\"white\" outline block className=\"custom-btn font-weight-bold text-uppercase mt-4 mb-1\">Submit</Button>\n                    </Form>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nconst withSaga = injectSaga({ key: constants.EVENT_FORM, saga });\nconst withReducer = injectReducer({ key: constants.EVENT_FORM, reducer })\n\nconst formspec = {\n    form: constants.EVENT_FORM,\n    enableReinitialize: true,\n    onSubmit: (values, dispatch) => {\n        const params = values.toJS();\n        dispatch(actions.onFormSubmit(params))\n        console.log(params)\n    }\n}\n\nexport default compose(\n    withReducer,\n    withSaga,\n    reduxForm(formspec),\n)(EventForm);","import React from 'react';\nimport { Container, Row, Col, Card, CardBody, CardTitle } from 'reactstrap';\nimport EventForm from '../../components/EventForm';\n\nfunction App() {\n    return (\n        <Container className=\"App\">\n            <Row>\n                <Col className=\"m-5\">\n                    <Card className=\"CARD shadow-lg\">\n                        <CardBody>\n                            <CardTitle className=\"text-center mb-4\">\n                                <h1 className=\"font-weight-bold\">Event&nbsp; Form</h1>\n                                <hr />\n                            </CardTitle>\n                            <EventForm />\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './containers/App';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router/immutable';\nimport history from './utils/history';\n\nimport configureStore from './configureStore';\n\nconst renderApp = () => {\n  const initialState = {};\n  const store = configureStore(initialState, history);\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n  )\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./containers/App', renderApp)\n  }\n};\n\nrenderApp();\n\nexport default renderApp;\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { fromJS, Iterable } from 'immutable';\n\nimport createReducer from './reducers';\n\nconst stateTransformer = state => {\n    if (Iterable.isIterable(state)) return state.toJS();\n    return state;\n};\n\nexport default function configureStore(initialState = {}, history) {\n    let composeEnhancers = compose;\n    const reduxSagaMonitorOptions = {};\n\n    // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n        /* eslint-disable no-underscore-dangle */\n        if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n            composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n        // NOTE: Uncomment the code below to restore support for Redux Saga\n        // Dev Tools once it supports redux-saga version 1.x.x\n        // if (window.__SAGA_MONITOR_EXTENSION__)\n        //   reduxSagaMonitorOptions = {\n        //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n        //   };\n        /* eslint-enable */\n    }\n\n    const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n    // Create the store with two middlewares\n    // 1. sagaMiddleware: Makes redux-sagas work\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n    const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n    if (process.env.NODE_ENV === 'development') {\n        const { createLogger } = require('redux-logger'); // eslint-disable-line global-require\n        middlewares.push(\n            createLogger({ stateTransformer, collapsed: true, diff: true }),\n        );\n    }\n\n    const enhancers = [applyMiddleware(...middlewares)];\n\n    const store = createStore(\n        createReducer(),\n        fromJS(initialState),\n        composeEnhancers(...enhancers),\n    );\n\n    // Extensions\n    store.runSaga = sagaMiddleware.run;\n    store.injectedReducers = {}; // Reducer registry\n    store.injectedSagas = {}; // Saga registry\n\n    // Make reducers hot reloadable, see http://mxs.is/googmo\n    /* istanbul ignore next */\n    if (module.hot) {\n        module.hot.accept('./reducers', () => {\n            store.replaceReducer(createReducer(store.injectedReducers));\n        });\n    }\n\n    return store;\n}"],"sourceRoot":""}